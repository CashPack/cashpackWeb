// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.cashpack.model;

import br.com.cashpack.model.CodigoPIN;
import br.com.cashpack.model.StatusUsuarioCashPack;
import br.com.cashpack.model.Telefone;
import br.com.cashpack.model.UsuarioCashPack;
import br.com.cashpack.model.UsuarioCashPackDataOnDemand;
import br.com.cashpack.service.UsuarioCashPackService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UsuarioCashPackDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UsuarioCashPackDataOnDemand: @Component;
    
    private Random UsuarioCashPackDataOnDemand.rnd = new SecureRandom();
    
    private List<UsuarioCashPack> UsuarioCashPackDataOnDemand.data;
    
    @Autowired
    UsuarioCashPackService UsuarioCashPackDataOnDemand.usuarioCashPackService;
    
    public UsuarioCashPack UsuarioCashPackDataOnDemand.getNewTransientUsuarioCashPack(int index) {
        UsuarioCashPack obj = new UsuarioCashPack();
        setCodigoPin(obj, index);
        setCpf(obj, index);
        setStatus(obj, index);
        setTelefone(obj, index);
        return obj;
    }
    
    public void UsuarioCashPackDataOnDemand.setCodigoPin(UsuarioCashPack obj, int index) {
        CodigoPIN codigoPin = null;
        obj.setCodigoPin(codigoPin);
    }
    
    public void UsuarioCashPackDataOnDemand.setCpf(UsuarioCashPack obj, int index) {
        String cpf = "cpfxxxxxx_" + index;
        if (cpf.length() > 11) {
            cpf = cpf.substring(0, 11);
        }
        obj.setCpf(cpf);
    }
    
    public void UsuarioCashPackDataOnDemand.setStatus(UsuarioCashPack obj, int index) {
        StatusUsuarioCashPack status = StatusUsuarioCashPack.class.getEnumConstants()[0];
        obj.setStatus(status);
    }
    
    public void UsuarioCashPackDataOnDemand.setTelefone(UsuarioCashPack obj, int index) {
        Telefone telefone = null;
        obj.setTelefone(telefone);
    }
    
    public UsuarioCashPack UsuarioCashPackDataOnDemand.getSpecificUsuarioCashPack(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UsuarioCashPack obj = data.get(index);
        Long id = obj.getId();
        return usuarioCashPackService.findUsuarioCashPack(id);
    }
    
    public UsuarioCashPack UsuarioCashPackDataOnDemand.getRandomUsuarioCashPack() {
        init();
        UsuarioCashPack obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return usuarioCashPackService.findUsuarioCashPack(id);
    }
    
    public boolean UsuarioCashPackDataOnDemand.modifyUsuarioCashPack(UsuarioCashPack obj) {
        return false;
    }
    
    public void UsuarioCashPackDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = usuarioCashPackService.findUsuarioCashPackEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UsuarioCashPack' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UsuarioCashPack>();
        for (int i = 0; i < 10; i++) {
            UsuarioCashPack obj = getNewTransientUsuarioCashPack(i);
            try {
                usuarioCashPackService.saveUsuarioCashPack(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
