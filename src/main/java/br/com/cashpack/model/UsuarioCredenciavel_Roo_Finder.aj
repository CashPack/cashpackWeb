// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.cashpack.model;

import br.com.cashpack.model.Credencial;
import br.com.cashpack.model.UsuarioCredenciavel;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect UsuarioCredenciavel_Roo_Finder {
    
    public static Long UsuarioCredenciavel.countFindUsuarioCredenciavelsByCredencial(Credencial credencial) {
        if (credencial == null) throw new IllegalArgumentException("The credencial argument is required");
        EntityManager em = UsuarioCredenciavel.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM UsuarioCredenciavel AS o WHERE o.credencial = :credencial", Long.class);
        q.setParameter("credencial", credencial);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<UsuarioCredenciavel> UsuarioCredenciavel.findUsuarioCredenciavelsByCredencial(Credencial credencial, String sortFieldName, String sortOrder) {
        if (credencial == null) throw new IllegalArgumentException("The credencial argument is required");
        EntityManager em = UsuarioCredenciavel.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM UsuarioCredenciavel AS o WHERE o.credencial = :credencial");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<UsuarioCredenciavel> q = em.createQuery(queryBuilder.toString(), UsuarioCredenciavel.class);
        q.setParameter("credencial", credencial);
        return q;
    }
    
}
