// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.cashpack.model;

import br.com.cashpack.model.Endereco;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Endereco_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Endereco.entityManager;
    
    public static final List<String> Endereco.fieldNames4OrderClauseFilter = java.util.Arrays.asList("logradouro", "numero", "bairro", "municipio", "siglaUF", "cep", "pais");
    
    public static final EntityManager Endereco.entityManager() {
        EntityManager em = new Endereco().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Endereco.countEnderecoes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Endereco o", Long.class).getSingleResult();
    }
    
    public static List<Endereco> Endereco.findAllEnderecoes() {
        return entityManager().createQuery("SELECT o FROM Endereco o", Endereco.class).getResultList();
    }
    
    public static List<Endereco> Endereco.findAllEnderecoes(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Endereco o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Endereco.class).getResultList();
    }
    
    public static Endereco Endereco.findEndereco(Long id) {
        if (id == null) return null;
        return entityManager().find(Endereco.class, id);
    }
    
    public static List<Endereco> Endereco.findEnderecoEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Endereco o", Endereco.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Endereco> Endereco.findEnderecoEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Endereco o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Endereco.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Endereco.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Endereco.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Endereco attached = Endereco.findEndereco(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Endereco.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Endereco.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Endereco Endereco.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Endereco merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
