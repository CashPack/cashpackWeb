// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.cashpack.model;

import br.com.cashpack.model.CodigoPIN;
import br.com.cashpack.model.Telefone;
import br.com.cashpack.model.Usuario;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Usuario_Roo_Finder {
    
    public static Long Usuario.countFindUsuariosByCodigoPinAndTelefone(CodigoPIN codigoPin, Telefone telefone) {
        if (codigoPin == null) throw new IllegalArgumentException("The codigoPin argument is required");
        if (telefone == null) throw new IllegalArgumentException("The telefone argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Usuario AS o WHERE o.codigoPin = :codigoPin AND o.telefone = :telefone", Long.class);
        q.setParameter("codigoPin", codigoPin);
        q.setParameter("telefone", telefone);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByCodigoPinAndTelefone(CodigoPIN codigoPin, Telefone telefone) {
        if (codigoPin == null) throw new IllegalArgumentException("The codigoPin argument is required");
        if (telefone == null) throw new IllegalArgumentException("The telefone argument is required");
        EntityManager em = Usuario.entityManager();
        TypedQuery<Usuario> q = em.createQuery("SELECT o FROM Usuario AS o WHERE o.codigoPin = :codigoPin AND o.telefone = :telefone", Usuario.class);
        q.setParameter("codigoPin", codigoPin);
        q.setParameter("telefone", telefone);
        return q;
    }
    
    public static TypedQuery<Usuario> Usuario.findUsuariosByCodigoPinAndTelefone(CodigoPIN codigoPin, Telefone telefone, String sortFieldName, String sortOrder) {
        if (codigoPin == null) throw new IllegalArgumentException("The codigoPin argument is required");
        if (telefone == null) throw new IllegalArgumentException("The telefone argument is required");
        EntityManager em = Usuario.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Usuario AS o WHERE o.codigoPin = :codigoPin AND o.telefone = :telefone");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Usuario> q = em.createQuery(queryBuilder.toString(), Usuario.class);
        q.setParameter("codigoPin", codigoPin);
        q.setParameter("telefone", telefone);
        return q;
    }
    
}
